#!/usr/bin/stap -v
global cpu_time
global sched_time
global vm_list

probe kernel.trace("kvm_load_check") {
        printf("%s %d %d %d %d %d %d\n", "LC", $op, $vm_id, $nr_load_entries, $load_period_msec, $start_load_time, $end_load_time)
        foreach ([pid, tid+] in cpu_time) {
                if (pid == $vm_id)
                        printf("NVL %d %d %d\n", $vm_id, tid, cpu_time[pid, tid])
        }
}

probe kernel.trace("kvm_vcpu_stat") {
        printf("%s %d %d %d %d\n", "VS", $vm_id, $vcpu_id, $run_delay, $flags)
}

probe kernel.trace("kvm_vcpu_load") {
        printf("%s %d %d %d %d %d\n", "VL", $vm_id, $vcpu_id, $cur_load_idx, $load_idx, $cpu_load)
}

probe kernel.trace("kvm_gthread_load") {
        printf("%s %d %d %05x %d %d %d\n", "TL", $vm_id, $vcpu_id, $guest_task_id, $cur_load_idx, $load_idx, $cpu_load)
}

probe kernel.trace("kvm_load_info") {
        printf("%s %d %d %d %d %d %d\n", 
                "LI", $kvm->vm_id, $kvm->interactive_phase, $kvm->pre_monitor_load, $vm_load, $eff_vm_load, $reactive_gtask_load )
}
probe kernel.trace("kvm_gtask_stat") {
        printf("%s %d %d %05x %d %d\n", "TS", $vm_id, $interactive_phase, $guest_task_id, $cpu_load, $flags)
}
probe kernel.trace("kvm_ui") {
        printf("%s %d %d %d\n", "UI", $kvm->vm_id, $event_type, $event_info)
}
probe __scheduler.ctxswitch.tp {
        if ($prev->se->is_vcpu)
                vm_list[prev_pid] = 1
        if ($next->se->is_vcpu) 
                vm_list[next_pid] = 1

        // for cpu load of non-vcpus in a vm
        if (prev_pid in vm_list && !$prev->se->is_vcpu && prev_tid in sched_time) {
                cpu_time[prev_pid, prev_tid] += gettimeofday_us() - sched_time[prev_tid]
        }
        if (next_pid in vm_list && !$next->se->is_vcpu) {
                sched_time[next_tid] = gettimeofday_us()
        }
}
