#!/usr/bin/stap -v

global resched_ipi_xmit_time_us
global ut_op
global ut_arg
global urgent_event
global vcpu_list
global se_pid
global se_vcpu

global resched_ipi_unlock_latency_us
global tlb_shootdown_latency_us

probe begin {
	resched_ipi_unlock_latency_us = $1 / 1000
	tlb_shootdown_latency_us = $2 / 1000

	printf("# resched_ipi_unlock_latency_us=%d\n", 
				resched_ipi_unlock_latency_us)
	printf("# tlb_shootdown_latency_us=%d\n", 
				tlb_shootdown_latency_us)

	ut_op[1] = "enq"
	ut_arg[1, 0] = "ts"	// urgent_tslice
	ut_arg[1, 1] = "sy"	// sync
	ut_arg[1, 2] = "N"

	ut_op[2] = "deq"
	ut_arg[2, 0] = "N"
	ut_arg[2, 1] = "N"
	ut_arg[2, 2] = "N"

	ut_op[3] = "iter"
	ut_arg[3, 0] = "rq"	// on_rq
	ut_arg[3, 1] = "tq"	// this_rq
	ut_arg[3, 2] = "N"

	ut_op[4] = "pick"
	ut_arg[4, 0] = "mo"	// offset from min_vruntime
	ut_arg[4, 1] = "lo"	// offset from left vruntime
	ut_arg[4, 2] = "N"

	ut_op[5] = "fail"
	ut_arg[5, 0] = "mo"
	ut_arg[5, 1] = "lo"
	ut_arg[5, 2] = "N"

	ut_op[6] = "req"
	ut_arg[6, 0] = "ts"
	ut_arg[6, 1] = "rs"	// remaining_tslice
	ut_arg[6, 2] = "rt"	// urgent_runtime

	ut_op[7] = "res"
	ut_arg[7, 0] = "rs"	// remaining_tslice
	ut_arg[7, 1] = "rt"	
	ut_arg[7, 2] = "fg"	// flags (hrtimer_active|in_hrtick_handler|urgent|on_rq|ret)

	ut_op[8] = "mod"
	ut_arg[8, 0] = "ts"
	ut_arg[8, 1] = "rs"
	ut_arg[8, 2] = "rr"	// remaining_runtime

	ut_op[9] = "utm"
	ut_arg[9, 0] = "dl"	// delay	
	ut_arg[9, 1] = "rt"
	ut_arg[9, 2] = "N"
}
probe kernel.trace("kvm_apic_ipi") {
	vec = $icr_low & 0xff
	if (tid() in vcpu_list) {
		cur_time_us = gettimeofday_us()
		if (vec == 0xfd)	// resched ipi
			resched_ipi_xmit_time_us[tid()] = cur_time_us
		printf("%d\tSI d%d_v%d-p%d v=%x\n",
			cur_time_us,
			pid(), vcpu_list[tid()], cpu(),
			vec
		)
	}
}
probe kernel.function("set_urgent_task") {
	if ($p->pid in vcpu_list) {
		printf("%d\t\tUT d%d_v%d-p%d->d%d_v%d ts=%d\n",
			gettimeofday_us(),
			pid(), vcpu_list[tid()], cpu(),
			$p->tgid, vcpu_list[$p->pid],
			$tslice / 1000
		)
	}
}
probe kernel.function("set_urgent_entity") {
	printf("%d\t\t  UE d%d_v%d-p%d:t%d:q%d:c%d:e%d:f%d ts=%d:%d\n",
		gettimeofday_us(),
		se_pid[$se],
		$se in se_vcpu ? se_vcpu[$se] : -1,
		$se->cfs_rq->rq->cpu,
		!$se->my_q,
		$se->on_rq,
		$se->cfs_rq->curr == $se,
		$se->urgent_node->next == &$se->urgent_node,
		$sync,
		$tslice / 1000,
		$se->urgent_node->next != &$se->urgent_node ? $se->urgent_tslice / 1000 : 0
	)
}
probe kernel.trace("sched_urgent_entity") {
	if ($op != 7 || $p->pid in vcpu_list) {
		if ($op != 7 || $arg3 & 0x01)
			urgent_event[$op] <<< 1
		printf("%d\t\t\tOP %s d%d_v%d-p%d %s=%d %s=%d %s=",
			gettimeofday_us(),
			ut_op[$op],
			$p ? $p->tgid : -1, 
			$p ? vcpu_list[$p->pid] : -1, 
			$cpu,
			ut_arg[$op, 0], $arg1 > 10000 || $arg1 < 0 ? $arg1 / 1000 : $arg1, 
			ut_arg[$op, 1], $arg2 > 10000 || $arg2 < 0 ? $arg2 / 1000 : $arg2,
			ut_arg[$op, 2]
		)
		if ($op != 7)
			printf("%d\n", $arg3 > 10000 || $arg3 < 0 ? $arg3 / 1000 : $arg3)
		else 
			printf("a%d:h%d:u%d:q%d:r%d\n",		// a: hrtick active, h: hrtick handler
				($arg3>>4) & 0x1, 
				($arg3>>3) & 0x1, 
				($arg3>>2) & 0x1, 
				($arg3>>1) & 0x1, 
				$arg3 & 0x1 
			)
	}
}
probe __scheduler.ctxswitch.tp {
	if ((prev_tid in vcpu_list) || (next_tid in vcpu_list)) {
		cur_time_us = gettimeofday_us()
		printf("%d S d%d_v%d-p%d:u%dq%d->d%d_v%d-p%d:u%d:ts%d\n", 
			cur_time_us,
			prev_pid, vcpu_list[prev_tid], cpu(), $prev->se->urgent, $prev->se->on_rq,
			next_pid, vcpu_list[next_tid], cpu(), $next->se->urgent, $next->se->urgent_tslice / 1000
		)
		// trick because &$next->se cannot be referenced
		se = @cast($next->se->cfs_rq, "cfs_rq")->curr
		se_pid[se] = next_pid
		se_vcpu[se] = vcpu_list[next_tid]

		se_pid[$next->se->parent] = next_pid

		resched_ipi_xmit_time_us[next_tid] = 0
	}
}
probe module("kvm").function("kvm_arch_vcpu_load") {
    vcpu_list[tid()] = $vcpu->vcpu_id
}
probe end {
	printf("urgent event stat\n")
	foreach ([op+] in urgent_event) {
		printf("%s\t%d\n", ut_op[op], @count(urgent_event[op]))
	}

}
probe kernel.function("put_prev_task") {
	if ($prev->se->on_rq && $prev->pid in vcpu_list &&
	    resched_ipi_xmit_time_us[$prev->pid]) {
		cur_time_us = gettimeofday_us()
		latency = cur_time_us - resched_ipi_xmit_time_us[$prev->pid]
		if (latency < resched_ipi_unlock_latency_us) {
			// warning
			printf("%d ## PP d%d_v%d-p%d resched (lat=%d rt=%d pu=%d ts=%d)\n",
				cur_time_us, 
				$prev->tgid, 
				vcpu_list[$prev->pid],
				$prev->se->cfs_rq->rq->cpu,
				latency,
				($prev->se->sum_exec_runtime - $prev->se->urgent_sum_exec_runtime) / 1000,
				$prev->se->urgent,
				$prev->se->urgent_tslice / 1000
			)
			print_backtrace()
		}
	}
}
// caller of set_need_resched()
//probe kernel.function("rcu_implicit_offline_qs"), kernel.function("print_cpu_stall"), kernel.function("force_quiescent_state"), kernel.function("__rcu_pending") {
//	if (tid() in vcpu_list && resched_ipi_xmit_time_us[tid()]) {
//		printf( "!! d%d_v%d-p%d %s\n", pid(), vcpu_list[tid()], cpu(), probefunc()) 
//	}
//}
// caller of set_tsk_need_resched()
//probe kernel.function("resched_task"), kernel.function("resched_task"), kernel.function("task_tick_rt") {
//	if ($p->pid in vcpu_list) { // && resched_ipi_xmit_time_us[$p->pid]) {
//		printf( "%d ## RT d%d_v%d-p%d %s\n", gettimeofday_us(), $p->tgid, vcpu_list[$p->pid], cpu(), probefunc()) 
//	}
//}
