#!/usr/bin/stap -v

global resched_ipi_xmit_time_us
global resched_stat
global ut_op
global ut_arg
global urgent_event
global vcpu_list
global se_pid
global se_vcpu
global running

global verbose
global debug_level
global warn_level
//global err_level

global resched_ipi_unlock_latency_us

probe begin {
	resched_ipi_unlock_latency_us = $1 / 1000
	verbose = $2

	printf("# resched_ipi_unlock_latency_us=%d\n", 
				resched_ipi_unlock_latency_us)
	printf("# verbose=%d\n", verbose)
	debug_level = 3
	warn_level = 2
	//err_level = 1

	//if (verbose == debug_level) {		/* add 20% overhead */
	//	resched_ipi_unlock_latency_us += (resched_ipi_unlock_latency_us / 5)
	//	tlb_shootdown_latency_us += (tlb_shootdown_latency_us / 5)
	//}
	//else if (verbose == warn_level) {	/* add 10% overhead */
	//	resched_ipi_unlock_latency_us += (resched_ipi_unlock_latency_us / 10)
	//	tlb_shootdown_latency_us += (tlb_shootdown_latency_us / 10)
	//}

	ut_op[1] = "enq"
	ut_arg[1, 0] = "ts"	// urgent_tslice
	ut_arg[1, 1] = "sy"	// sync
	ut_arg[1, 2] = "ut"	// urgent: 1==URGENT_TAIL, 2==URGENT_HEAD

	ut_op[2] = "deq"
	ut_arg[2, 0] = "N"
	ut_arg[2, 1] = "N"
	ut_arg[2, 2] = "N"

	ut_op[3] = "iter"
	ut_arg[3, 0] = "rq"	// on_rq
	ut_arg[3, 1] = "tq"	// this_rq
	ut_arg[3, 2] = "N"

	ut_op[4] = "pick"
	ut_arg[4, 0] = "mo"	// offset from min_vruntime
	ut_arg[4, 1] = "lo"	// offset from left vruntime
	ut_arg[4, 2] = "N"

	ut_op[5] = "fail"
	ut_arg[5, 0] = "mo"
	ut_arg[5, 1] = "lo"
	ut_arg[5, 2] = "N"

	ut_op[6] = "req"
	ut_arg[6, 0] = "ts"
	ut_arg[6, 1] = "pe"	// pending_urgent_events
	ut_arg[6, 2] = "ut"

	ut_op[7] = "res"
	ut_arg[7, 0] = "rs"	// remaining_tslice
	ut_arg[7, 1] = "rt"	
	ut_arg[7, 2] = "fg"	// flags (hrtimer_active|in_hrtick_handler|urgent|on_rq|ret)

	ut_op[8] = "mod"
	ut_arg[8, 0] = "ts"
	ut_arg[8, 1] = "er"	// exec_runtime
	ut_arg[8, 2] = "rr"	// remaining_runtime

	ut_op[9] = "utm"
	ut_arg[9, 0] = "dl"	// delay	
	ut_arg[9, 1] = "pe"
	ut_arg[9, 2] = "ut"	// or 3==URGENT_EXPIRED

	ut_op[10] = "ac1"
	ut_arg[10, 0] = "ts"
	ut_arg[10, 1] = "sy"
	ut_arg[10, 2] = "ut"

	ut_op[11] = "ac2"
	ut_arg[11, 0] = "ts"
	ut_arg[11, 1] = "sy"
	ut_arg[11, 2] = "ut"
}
probe kernel.trace("kvm_apic_ipi") {
	vec = $icr_low & 0xff
	if (tid() in vcpu_list) {
		cur_time_us = gettimeofday_us()
		if (vec == 0xfd)	// resched ipi
			resched_ipi_xmit_time_us[tid()] = cur_time_us
		if (verbose >= debug_level) 
			printf("%d\tSI d%d_v%d-p%d v=%x\n",
				cur_time_us,
				pid(), vcpu_list[tid()], cpu(),
				vec
			)
	}
}
probe kernel.trace("kvm_apic") {
	off = $reg & ~0xf
	if ($rw == 0 && off == 0x300) {	// APIC_ICR
		printf("%d ICR d%d_v%d-p%d r=%d v=%d\n", gettimeofday_us(), pid(), vcpu_list[tid()], cpu(), $reg, $val)
	}
}
probe kernel.trace("kvm_apic_eoi") {
	printf("%d EOI d%d_v%d-p%d v=%x c=%d\n", gettimeofday_us(), pid(), vcpu_list[tid()], cpu(), $vector, $p->se->pending_urgent_events->counter)
}
probe kernel.function("set_urgent_task") {
	if ($p->pid in vcpu_list) {
		if (verbose >= debug_level) 
			printf("%d\t\tUT d%d_v%d-p%d->d%d_v%d ts=%d\n",
				gettimeofday_us(),
				pid(), vcpu_list[tid()], cpu(),
				$p->tgid, vcpu_list[$p->pid],
				$tslice / 1000
			)
	}
}
probe kernel.function("set_urgent_entity") {
	if (verbose >= debug_level) 
		printf("%d\t\t  UE d%d_v%d-p%d:t%d:q%d:c%d:e%d:f%d:p%d ts=%d:%d ht=%x\n",
			gettimeofday_us(),
			se_pid[$se],
			$se in se_vcpu ? se_vcpu[$se] : -1,
			$se->cfs_rq->rq->cpu,
			!$se->my_q,
			$se->on_rq,
			$se->cfs_rq->curr == $se,
			$se->urgent_node->next == &$se->urgent_node,
			$sync,
			$se->pending_urgent_events->counter,
			$tslice / 1000,
			$se->urgent_node->next != &$se->urgent_node ? $se->urgent_tslice / 1000 : 0,
			$se->cfs_rq->rq->hrtick_timer->state
		)
}
probe kernel.function("check_need_hrtick").return {
	printf("%d CH p%d %d\n", gettimeofday_us(), cpu(), $return)
}
probe kernel.trace("sched_urgent_entity") {
	if ($op != 7 || $p->pid in vcpu_list) {
		if ($op != 7 || $arg3 & 0x01)
			urgent_event[$op] <<< 1
		if (verbose >= debug_level) 
			printf("%d\t\t\tOP %s d%d_v%d-p%d:l%d %s=%d %s=%d ",
				gettimeofday_us(),
				ut_op[$op],
				//$p ? $p->tgid : -1, 
				//$p ? vcpu_list[$p->pid] : -1, 
				se_pid[$se], 
				$se in se_vcpu ? se_vcpu[$se] : -1,
				$cpu,
				$cpu == cpu(),
				ut_arg[$op, 0], $arg1 > 10000 || $arg1 < 0 ? $arg1 / 1000 : $arg1, 
				ut_arg[$op, 1], $arg2 > 10000 || $arg2 < 0 ? $arg2 / 1000 : $arg2
			)
		if ($op != 7) {
			if ($op == 8 &&	/* mod */
			    (resched_stat[$p->pid] == 1 || resched_stat[$p->pid] == 2))
				resched_stat[$p->pid] += 2
			else if ($op == 6 && verbose >= debug_level) {	/* req */
				if (resched_stat[$p->pid] == 0)
					print("YD ")	/* yield */
				else if (resched_stat[$p->pid] == 1) {
					if ($p->se->urgent != 1)
						print("B1 ")	/* bug1 */
					else
						print("QT ")	/* queue tail */
				}
				else if (resched_stat[$p->pid] == 2)
					print("B2 ")		/* bug2 */
				else if (resched_stat[$p->pid] == 3)
					print("UM ")	/* res-urgent -> mod */
				else if (resched_stat[$p->pid] == 4)
					print("NM ")	/* res-non-urgent -> mod */
				else
					print("OT ")	/* others (=0) */
			}

			if (verbose >= debug_level) 
				printf("%s=%d\n", 
					ut_arg[$op, 2], 
					$arg3 > 10000 || $arg3 < 0 ? $arg3 / 1000 : $arg3
				)
		}
		else {	/* res */
			if (verbose >= debug_level) 
				printf("%s=a%d:h%d:u%d:q%d:r%d\n",		// a: hrtick active, h: hrtick handler
					ut_arg[$op, 2],
					($arg3>>5) & 0x1, 
					($arg3>>4) & 0x1, 
					($arg3>>2) & 0x3, 
					($arg3>>1) & 0x1, 
					$arg3 & 0x1 
				)
			if (!($arg3 & 0x1)) {
				if ($p->se->urgent)
					resched_stat[$p->pid] = 1
				else	/* not urgent */
					resched_stat[$p->pid] = 2
			}
		}
	}
}
probe __scheduler.ctxswitch.tp {
	if ((prev_tid in vcpu_list) || (next_tid in vcpu_list)) {
		cur_time_us = gettimeofday_us()
		if (verbose >= debug_level) 
			printf("%d S d%d_%s%d-p%d:u%dq%d->d%d_%s%d-p%d:u%d:ts%d\n", 
				cur_time_us,
				prev_pid, prev_tid in vcpu_list ? "v" : "t", 
				prev_tid in vcpu_list ? vcpu_list[prev_tid] : prev_tid, cpu(), $prev->se->urgent, $prev->se->on_rq,
				next_pid, next_tid in vcpu_list ? "v" : "t", 
				next_tid in vcpu_list ? vcpu_list[next_tid] : next_tid, cpu(), $next->se->urgent, $next->se->urgent_tslice / 1000
			)
		if ($prev->se->on_rq && $prev->pid in vcpu_list && verbose >= warn_level) {
			if (resched_ipi_xmit_time_us[$prev->pid]) {
				latency = cur_time_us - resched_ipi_xmit_time_us[$prev->pid]
				if (latency < resched_ipi_unlock_latency_us) {
					printf("%d ## warn: RESCHED d%d_v%d-p%d (lat=%d rt=%d prev_u=%d next_u=%d ts=%d)\n",
							cur_time_us, 
							$prev->tgid, 
							vcpu_list[$prev->pid],
							cpu(),
							latency,
							($prev->se->sum_exec_runtime - $prev->se->urgent_sum_exec_runtime) / 1000,
							$prev->se->urgent,
							$next->se->urgent,
							$prev->se->urgent_tslice / 1000
					)
				}
			}
		}
		// trick because &$next->se cannot be referenced
		se = @cast($next->se->cfs_rq, "cfs_rq")->curr
		se_pid[se] = next_pid
		se_vcpu[se] = vcpu_list[next_tid]

		se_pid[$next->se->parent] = next_pid

		resched_ipi_xmit_time_us[next_tid] = 0
		resched_stat[next_tid] = 0


		running[prev_tid] = 0
		running[next_tid] = 1
	}
}
probe module("kvm").function("kvm_arch_vcpu_load") {
    vcpu_list[tid()] = $vcpu->vcpu_id
}
probe kernel.trace("kvm_lock_holder") {
	if ($point_flag == 0x01 	/* involuntary preemption */
	    && $p->on_rq) {
	    /*&& !$p->se->urgent && $p->on_rq) {*/
		if ($depth) { 
			printf("%d LHP d%d_v%d-p%d %x %x %x %x ip=%x ci=%x u%d\n", 
				gettimeofday_us(), $p->tgid, vcpu_list[$p->pid], cpu(),
				$eip1, $eip2, $eip3, $eip4, $guest_ip, $caller_info, $user_mode)
		}
	}
}
probe end {
	printf("urgent event stat\n")
	foreach ([op+] in urgent_event) {
		printf("%s\t%d\n", ut_op[op], @count(urgent_event[op]))
	}

}
//probe kernel.function("put_prev_task") {
//	if ($prev->se->on_rq && $prev->pid in vcpu_list &&
//	    resched_ipi_xmit_time_us[$prev->pid]) {
//		cur_time_us = gettimeofday_us()
//		latency = cur_time_us - resched_ipi_xmit_time_us[$prev->pid]
//		if (latency < resched_ipi_unlock_latency_us) {
//			// warning
//			printf("%d ## PP d%d_v%d-p%d resched (lat=%d rt=%d pu=%d ts=%d)\n",
//				cur_time_us, 
//				$prev->tgid, 
//				vcpu_list[$prev->pid],
//				$prev->se->cfs_rq->rq->cpu,
//				latency,
//				($prev->se->sum_exec_runtime - $prev->se->urgent_sum_exec_runtime) / 1000,
//				$prev->se->urgent,
//				$prev->se->urgent_tslice / 1000
//			)
//			//print_backtrace()
//		}
//	}
//}
// caller of set_need_resched()
//probe kernel.function("rcu_implicit_offline_qs"), kernel.function("print_cpu_stall"), kernel.function("force_quiescent_state"), kernel.function("__rcu_pending") {
//	if (tid() in vcpu_list && resched_ipi_xmit_time_us[tid()]) {
//		printf( "!! d%d_v%d-p%d %s\n", pid(), vcpu_list[tid()], cpu(), probefunc()) 
//	}
//}
// caller of set_tsk_need_resched()
//probe kernel.function("resched_task"), kernel.function("resched_task"), kernel.function("task_tick_rt") {
//	if ($p->pid in vcpu_list) { // && resched_ipi_xmit_time_us[$p->pid]) {
//		printf( "%d ## RT d%d_v%d-p%d %s\n", gettimeofday_us(), $p->tgid, vcpu_list[$p->pid], cpu(), probefunc()) 
//	}
//}
