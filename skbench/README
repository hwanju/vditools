=======================================================
=========== Simple KVM Benchmark (skbench) ============
=======================================================

Tested under:
	vdikernel
	vdiqemu
	libvirt 0.9.4
	spiceplay
	qemu-kvm 0.15.0

This benchmark is a simple KVM benchmark suite written in Python.
It simply restores multiple guests, makes them run specified workloads, and collects results reported by each guest.
It generates and runs bash shell scripts based on your specified workload.

* How to use this tool
1) Make your config file named config.py
   You can reference config.py.example and change it for your setting
   Note that the name is 'config.py'

2) Make a workload file
   The workload file is typically stored in 'workloads' directory.
   You should specify three variables: prolog_script, epilog_script, workload_scripts.
   All scripts should be written in the bash shell script and be located in the 'scripts' directory .
   - prolog_script is run right before executing the workloads.
   - epilog_script is run right after the workloads of all guests are finished.
   - workloads_scripts is a list specifying in order what workload is run in each domain.
   See several examples in 'workloads' directory.

3) Prepare programs used by workloads in 'dist' directory
   All programs in the 'dist' directory is copied to each guests and host under a root directory.
   And the directory including these programs of each guest is automatically added into its 'PATH' environment variable.
   So, you can write scripts, explained in 4), with all programs via its absolute path.

4) Write the scripts specified by your workload file
   Workload scripts are supported a few macros, which are automatically replaced with certain strings.
     - WAIT_START_SIGNAL: this is for synchronization with workload start signal.
                          Scripts below this macro are blocked until receiving a start signal from host machine.
                          (upper-part scripts are automatically run via remote execution  by skbench)
     - TO_HOST: this is for reporting the result of a guest with pipe.
                (e.g. cat result_file | TO_HOST) 
     - SEND_READY_SIGNAL: this macro sends a ready signal to host.
                         It is not needed if there is no script to run before notifying the booting completed.
                         It is useful when there is a pre-task before workloads are started.
   skbench allows you to passing a private string argument to all the three scripts by using '-p' option.
   A passed parameter is used by means of '$PRIVATE_ARG'

5) Run skbench
   skbench currently supports automatic mode only.
   
   all guestss are automatically run their workloads, finish them, and report their results to host.

    With repect to some commands following options, you can type just 'skbench' and show help messages. 

    Example:
        # skbench -w workloads/disk_rndread.skw -p 1 start-stop

* Authors
- Sangwook Kim (swkim@csl.skku.edu)
- Hyeontaek Lim (paran@sparcs.kaist.ac.kr)
- Hwanju Kim (hjukim@camars.kaist.ac.kr)
