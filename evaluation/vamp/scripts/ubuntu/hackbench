NR_GROUPS=`cat /proc/cpuinfo | grep processor | wc -l`

mem_hog.sh	# allocate memory intentionally to avoid runtime minor fault of kvm vcpus

SEND_READY_SIGNAL
WAIT_START_SIGNAL

prefix_cmd=
if [ "$MIXED_TRACE" == "1" ]; then
	val=`echo $OPTIONAL_INFO | cut -d: -f2`
        if [ "$val" != "" ]; then
                NR_GROUPS=$val
        fi
	if [ "$(echo $PRIVATE_ARG2 | grep pin)" != "" ]; then
		prefix_cmd="taskset -c 4-7"
	fi

	# event-based profiling
	fg_workload=`echo $WORKLOAD_FORMAT | cut -d: -f1`
	fg_workload=${fg_workload:1}	# trim 1
	echo "Mixed with $fg_workload as a foreground workload" > /tmp/eventprof.log
	if [ "$(echo $fg_workload | grep launch)" != "" ]; then		# XXX_launch
		fg_workload=`echo $fg_workload | cut -d_ -f1`		# XXX
		if [ "$(echo $fg_workload | grep impress)" != "" ]; then	# impress -> soffice
			fg_workload=soffice
		fi
		echo "eventprof is started for $fg_workload" >> /tmp/eventprof.log
		eventprof -t $fg_workload -p 7 /dev/input/event1 /dev/input/event2 >> /tmp/eventprof.log &
	fi

	if [ "$(echo $PRIVATE_ARG2 | grep para)" != "" ]; then
		param1=$(echo $PRIVATE_ARG2 | cut -d: -f2)
		param2=$(echo $PRIVATE_ARG2 | cut -d: -f3)
		nr_fast_cpus=2
		if [ "$param1" != "" ]; then
			nr_fast_cpus=$param1	# initial # of fast cpus
		fi
		opt=""
		if [ "$param2" != "" ]; then
			opt="-m $param2"	# mode
		fi
		vdiguest -f $nr_fast_cpus -v 1 -p 1000 $opt /dev/input/event1 /dev/input/event2 > /tmp/vdiguest.log 2>&1 &
	fi
fi

i=0
echo > /tmp/total.result
while [ 1 ]
do
        # check pvspinlock current status
        if [ -e /sys/kernel/debug/kvm/spinlocks/ ]; then
                echo "pvspinlock label" > /tmp/pvspinlock.log
                find /sys/kernel/debug/kvm/spinlocks/ -type f -exec basename {} \; >> /tmp/pvspinlock.log
                echo "pvspinlock start" >> /tmp/pvspinlock.log
                find /sys/kernel/debug/kvm/spinlocks/ -type f -exec cat {} \; >> /tmp/pvspinlock.log
        fi
        # init lockstat
        if [ -e /proc/lock_stat ]; then
                echo 0 > /proc/lock_stat
        fi
	# check and run futex profiling
	if [ "$PRIVATE_ARG2" == "futex" -a $i -eq 0 -a -e /root/futex_prof.ko ]; then
		echo "futex_wait_stat" > /tmp/futex_prof.log
		staprun /root/futex_prof.ko >> /tmp/futex_prof.log 2>&1 &
	fi

        echo "start_stat" > /tmp/stat.log
        cat /proc/stat >> /tmp/stat.log
        echo start_time=`date '+%s'` > /tmp/schedstat.log
        cat /proc/schedstat >> /tmp/schedstat.log
	pidstat -u 10 > /tmp/pidstat.log &
        
	/usr/bin/time -v $prefix_cmd /root/hackbench/hackbench $NR_GROUPS thread 15000 > /tmp/result 2>&1

	# finish futex profiling if needed
	if [  "$PRIVATE_ARG2" == "futex" -a $i -eq 0 ]; then
		killall -15 stapio
	fi

	killall -9 pidstat
        echo "end_stat" >> /tmp/stat.log
        cat /proc/stat >> /tmp/stat.log
        echo end_time=`date '+%s'` >> /tmp/schedstat.log
        cat /proc/schedstat >> /tmp/schedstat.log
        
        # check pvspinlock finish status
        if [ -e /sys/kernel/debug/kvm/spinlocks/ ]; then
                echo "pvspinlock end" >> /tmp/pvspinlock.log
                find /sys/kernel/debug/kvm/spinlocks/ -type f -exec cat {} \; >> /tmp/pvspinlock.log
        fi
        
        # merge result
        cat /tmp/result >> /tmp/total.result
        if [ -e /sys/kernel/debug/kvm/spinlocks/ ]; then
                cat /tmp/pvspinlock.log >> /tmp/total.result
        fi
        if [ -e /proc/lock_stat ]; then
                cat /proc/lock_stat >> /tmp/total.result
        fi
        cat /tmp/stat.log >> /tmp/total.result
        cat /tmp/schedstat.log >> /tmp/total.result
	cat /tmp/pidstat.log >> /tmp/total.result

	if [ "$PRIVATE_ARG2" == "no_iter" ]; then
		break
	fi

	# query to host whether the minimum number of iterations are ended
	SEND_QUERY_SIGNAL

	# get a message from host
	while [ 1 ]
	do
		if [ -e /tmp/query ]
		then
			break
		fi
		sleep 0.01
	done

	# (stop or repeat)
	reply=$(cat /tmp/query)
	if [ "$reply" = "stop" ]
	then
		break
	fi
	rm /tmp/query
	i=$(( $i + 1 ))
done
# futex result
if [ "$PRIVATE_ARG2" == "futex" ]; then
	sleep 10
	cat /tmp/futex_prof.log >> /tmp/total.result
fi

# vdiguest extention debug result
killall -9 vdiguest
if [ -e /tmp/vdiguest.log ]; then
	cat /tmp/vdiguest.log >> /tmp/parsec.result
fi

# eventprof result
killall -9 eventprof
if [ -e /tmp/eventprof.log ]; then
	echo "EVENTPROF" >> /tmp/parsec.result
	cat /tmp/eventprof.log >> /tmp/parsec.result
fi

# if mixed with video, this log file exists
if [ -e /tmp/video.log ]; then
	cat /tmp/video.log >> /tmp/total.result
fi

USER_HOME=/home/ubuntu1104
for i in `seq 5`; do
	if [ -e $USER_HOME/vlc.frames.$i ]; then
		echo "FRAMETIME$i" >> /tmp/total.result
		cat $USER_HOME/vlc.frames.$i >> /tmp/total.result
	fi
done

cat /tmp/total.result | TO_HOST
