PACKAGE=
TYPE=

cd ~/parsec-2.1
mkdir -p pkgs/$TYPE/$PACKAGE/run/
tar xf pkgs/$TYPE/$PACKAGE/inputs/input_native.tar -C pkgs/$TYPE/$PACKAGE/run/
SEND_READY_SIGNAL
WAIT_START_SIGNAL

echo > /tmp/parsec.result
while [ 1 ]
do
        # check pvspinlock current status
        if [ -e /sys/kernel/debug/kvm/spinlocks/ ]; then
                echo "pvspinlock label" > /tmp/pvspinlock.log
                find /sys/kernel/debug/kvm/spinlocks/ -type f -exec basename {} \; >> /tmp/pvspinlock.log
                echo "pvspinlock start" >> /tmp/pvspinlock.log
                find /sys/kernel/debug/kvm/spinlocks/ -type f -exec cat {} \; >> /tmp/pvspinlock.log
        fi
        # init lockstat
        if [ -e /proc/lock_stat ]; then
                echo 0 > /proc/lock_stat
        fi

        echo "start_stat" > /tmp/stat.log
        cat /proc/stat >> /tmp/stat.log
        echo start_time=`date '+%s'` > /tmp/schedstat.log
        cat /proc/schedstat >> /tmp/schedstat.log
        
        bin/parsecmgmt -a run -p $PACKAGE -n 8 -i native -s "/usr/bin/time -v" > /tmp/result

        echo "end_stat" >> /tmp/stat.log
        cat /proc/stat >> /tmp/stat.log
        echo end_time=`date '+%s'` >> /tmp/schedstat.log
        cat /proc/schedstat >> /tmp/schedstat.log
        
        # check pvspinlock finish status
        if [ -e /sys/kernel/debug/kvm/spinlocks/ ]; then
                echo "pvspinlock end" >> /tmp/pvspinlock.log
                find /sys/kernel/debug/kvm/spinlocks/ -type f -exec cat {} \; >> /tmp/pvspinlock.log
        fi
        
        # merge result
        cat /tmp/result >> /tmp/parsec.result
        if [ -e /sys/kernel/debug/kvm/spinlocks/ ]; then
                cat /tmp/pvspinlock.log >> /tmp/parsec.result
        fi
        if [ -e /proc/lock_stat ]; then
                cat /proc/lock_stat >> /tmp/parsec.result
        fi
        cat /tmp/stat.log >> /tmp/parsec.result
        cat /tmp/schedstat.log >> /tmp/parsec.result

	# query to host whether the minimum number of iterations are ended
	SEND_QUERY_SIGNAL

	# get a message from host
	while [ 1 ]
	do
		if [ -e /tmp/query ]
		then
			break
		fi
		sleep 0.01
	done

	# (stop or repeat)
	reply=$(cat /tmp/query)
	if [ "$reply" = "stop" ]
	then
		break
	fi
	rm /tmp/query
done

cat /tmp/parsec.result | TO_HOST
